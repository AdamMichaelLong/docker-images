# The DockerHub repository name.
# This will also be used as the organisation tag in the image.
ORGANISATION=unocha

# Miscellaneous utilities used by the build scripts.
AWK=awk
DOCKER=docker
ECHO=echo
GREP=grep -E
MAKE=make
RM=rm
SED=sed

# Initialise empty variables.
VERSION=
EXTRAVERSION=

# Common build targets.
build: clean template
	$(DOCKER) build \
		--build-arg VCS_REF=`git rev-parse --short HEAD` \
		--build-arg VCS_URL=`git config --get remote.origin.url` \
		--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
		--build-arg VERSION=$(VERSION) \
		. | tee buildlog.txt

# Create a Dockerfile from the template.
template:
	@$(SED) "s/%%VERSION%%/$(VERSION)/" < Dockerfile.tmpl > Dockerfile

# Tag the image with out organisation, name and version.
tag:
	$(eval IMAGE_HASH=$(shell tail -n 1 buildlog.txt | $(AWK) '{print $$NF}'))
	$(DOCKER) tag $(IMAGE_HASH) $(ORGANISATION)/$(IMAGE):$(VERSION)$(EXTRAVERSION)

# Remove the buildlog.
clean:
	$(RM) -f Dockerfile buildlog.txt

# Push the tagged image to DockerHub.
push:
	$(DOCKER) push $(ORGANISATION)/$(IMAGE):$(VERSION)

# Remove intermediate images.
clean_images:
	@echo Clean up intemediate images.
	for i in `$(GREP) '^ ---> ([a-z0-9]){12}$$' buildlog.txt | $(AWK) '{print $$2}'`; do \
		$(DOCKER) rmi -f $$i; \
	done

.PHONY: build tag clean
